(begin )
(define-syntax let-syntax (syntax-rules (...) (#(#t ...) #(123 ... . yolo))))
(let-syntax () (let-syntax ((lambda (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (define-syntax define-structure (syntax-rules (g) (#(#t ...) #(123 ... . yolo))))))
(define-syntax lambda (syntax-rules ()))
(letrec-syntax ((do (syntax-rules (c e) (#(#t ...) #(123 ... . yolo)) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) (let-syntax ((scode-quote (syntax-rules (g) ((#(c) ...) (123.45345 ... . yolo))))) (begin (define-syntax make-environment (syntax-rules (g) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)))))))
(define-syntax define-syntax (syntax-rules (g) (#(#t ...) #(123 ... . yolo))))
(begin )
(let-syntax ((scode-quote (syntax-rules (g) ((#(c) ...) (123.45345 ... . yolo))))) (define-syntax cons-stream (syntax-rules (+ e) ((#(-) .  (#t #\newline)) #(+ . yolo)) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?))))
(begin )
(letrec-syntax ((macro (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (define-syntax cons-stream (syntax-rules (- f) ((#(ep) .  (#t #\newline)) j1) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)))))
(define-syntax delay (syntax-rules (+ a) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?) (("yolo") #(123 ... . yolo))))
(letrec-syntax ((define-integrable (syntax-rules (- f) ((#(ep) .  (#t #\newline)) j1) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) )
(begin )
(define-syntax named-lambda (syntax-rules (-) (("yolo") #(123 ... . yolo))))
(letrec-syntax ((named-lambda (syntax-rules (b) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) (let-syntax ((macro (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (begin )))
(define-syntax cons-stream (syntax-rules (- f) ((#(ep) .  (#t #\newline)) j1) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))
(let-syntax () )
(define (q< ) '123.45)
(letrec-syntax () )
(define-syntax if (syntax-rules (+) ((#(-) .  (#t #\newline)) #(+ . yolo))))
(let-syntax ((define-integrable (syntax-rules (- f) ((#(ep) .  (#t #\newline)) j1) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) (define $!7h*/^k~8:3ebipr5>c=dj?v-w%<q2au$6slx.1mzt+n4fy0&9o_g '("yolo #t)))
(define-syntax make-environment (syntax-rules (e d) (("yolo") #(123 ... . yolo)) (((at c^) ...) #f)))
(define (dj$-h9bt1wpz%4d2 y) (let-syntax () ) ('.@ yolo))
(letrec-syntax () (let-syntax ((define-macro (syntax-rules (g) (#(#t ...) #(123 ... . yolo))))) ))
(letrec-syntax ((unassigned? (syntax-rules (b) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) (let-syntax () ))
(begin )
(define (o+key70*1n<zfqcm  . lsixo*z~vc:f_&/e9+lyd>0!23r-?j8) (letrec-syntax ((quote (syntax-rules (g) ((#(c) ...) (123.45345 ... . yolo))))) (define wzj?6$ (123.45345))) (if \# #t #f))
(begin (define-syntax access (syntax-rules (+ e) ((#(-) .  (#t #\newline)) #(+ . yolo)) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?))))
(let-syntax ((cons-stream (syntax-rules (c e) (#(#t ...) #(123 ... . yolo)) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) (begin ))
(define wzj?6$ '("yolo #t))
(begin )
(let-syntax () (let-syntax ((macro (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (begin )))
(define (=l2_h10$6 lsixo*z~vc:f_&/e9+lyd>0!23r-?j8 . r-bemj) ''())
(let-syntax () (begin (define-syntax the-environment (syntax-rules ()))))
(let-syntax ((define-integrable (syntax-rules (- f) ((#(ep) .  (#t #\newline)) j1) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo))))) )
(letrec-syntax ((do (syntax-rules (b f) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?) ((#(-) .  (#t #\newline)) #(+ . yolo))))) (define-syntax if (syntax-rules (+) ((#(-) .  (#t #\newline)) #(+ . yolo)))))
(define (agpnfl?<6m_:a0rw agpnfl?<6m_:a0rw . lsixo*z~vc:f_&/e9+lyd>0!23r-?j8) (delay ((if #f #t 12.123123) ', ())))
(letrec-syntax () )
(define (dj$-h9bt1wpz%4d2 >ie*4j&!s) (do ((yu8j<v-13q54&:xy ((set! abcde (if #t 12))) (let-syntax ((define (syntax-rules (...) (#(#t ...) #(123 ... . yolo))))) (if "yolo" '())))) (((if #f #t 12.123123) ', ()) []))
(begin (begin ))
(define /e95~43%g6.psn^r$t+!y-li>=8b?w0cx_/f2*kh&uodqza:7v<jm1 (delay (if '(1) "yolo" #f)))
(begin (begin ))
(letrec-syntax ((bkpt (syntax-rules (...) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?)))) )
(letrec-syntax ((macro (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (letrec-syntax ((or (syntax-rules (- a) (#(#t ...) #(123 ... . yolo)) (((at c^) ...) #f)))) (let-syntax ((quasiquote (syntax-rules (g) (#(#t ...) #(123 ... . yolo))))) (let-syntax ((lambda (syntax-rules (f d) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)) ((#(ep) .  (#t #\newline)) j1)))) (define-syntax define-structure (syntax-rules (g) (#(#t ...) #(123 ... . yolo))))))))
(letrec-syntax () )
(begin (begin (begin )))
(let-syntax ((default-object? (syntax-rules (e d) (("yolo") #(123 ... . yolo)) (((at c^) ...) #f)))) (define-syntax do (syntax-rules (c e) (#(#t ...) #(123 ... . yolo)) ((ep .  (#t #\newline)) #(#((a8l/&g72>-$1_+^z.k6!=uce*jn<h?s4yd~i0xa3rwfv%9mpbo:5tq a8l/&g72>-$1_+^z.k6!=uce*hn<h?s4yd~i0xa3rwfv%9mpbo:5tq)) . yolo)))))
(define-syntax cons-stream (syntax-rules (+ e) ((#(-) .  (#t #\newline)) #(+ . yolo)) (sfx+so~pvr7l9:8$.%6a/m<t1j24wn_ ?)))
(define (!4 agpnfl?<6m_:a0rw) (define m3q= (delay (if '(1) "yolo" #f))) ((if #f #t 12.123123)))
(let-syntax () (begin ))
